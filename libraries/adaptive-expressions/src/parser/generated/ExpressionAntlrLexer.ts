// Generated from src/parser/ExpressionAntlrLexer.g4 by ANTLR 4.7.3-SNAPSHOT

/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionAntlrLexer extends Lexer {
	public static readonly BlockComment = 1;
	public static readonly LineComment = 2;
	public static readonly STRING_INTERPOLATION_START = 3;
	public static readonly PLUS = 4;
	public static readonly SUBSTRACT = 5;
	public static readonly NON = 6;
	public static readonly XOR = 7;
	public static readonly ASTERISK = 8;
	public static readonly SLASH = 9;
	public static readonly PERCENT = 10;
	public static readonly EQUAL = 11;
	public static readonly DOUBLE_EQUAL = 12;
	public static readonly NOT_EQUAL = 13;
	public static readonly SINGLE_AND = 14;
	public static readonly DOUBLE_AND = 15;
	public static readonly DOUBLE_VERTICAL_CYLINDER = 16;
	public static readonly LESS_THAN = 17;
	public static readonly MORE_THAN = 18;
	public static readonly LESS_OR_EQUAl = 19;
	public static readonly MORE_OR_EQUAL = 20;
	public static readonly OPEN_BRACKET = 21;
	public static readonly CLOSE_BRACKET = 22;
	public static readonly DOT = 23;
	public static readonly OPEN_SQUARE_BRACKET = 24;
	public static readonly CLOSE_SQUARE_BRACKET = 25;
	public static readonly OPEN_CURLY_BRACKET = 26;
	public static readonly CLOSE_CURLY_BRACKET = 27;
	public static readonly COMMA = 28;
	public static readonly COLON = 29;
	public static readonly SEMICOLON = 30;
	public static readonly ARROW = 31;
	public static readonly NULL_COALESCE = 32;
	public static readonly QUESTION_MARK = 33;
	public static readonly NUMBER = 34;
	public static readonly WHITESPACE = 35;
	public static readonly IDENTIFIER = 36;
	public static readonly NEWLINE = 37;
	public static readonly STRING = 38;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 39;
	public static readonly TEMPLATE = 40;
	public static readonly ESCAPE_CHARACTER = 41;
	public static readonly TEXT_CONTENT = 42;
	public static readonly STRING_INTERPOLATION_MODE = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "STRING_INTERPOLATION_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "DIGIT", "OBJECT_DEFINITION", "BlockComment", "LineComment", 
		"STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR", "ASTERISK", 
		"SLASH", "PERCENT", "EQUAL", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND", 
		"DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl", 
		"MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET", 
		"CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", 
		"COLON", "SEMICOLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", 
		"WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", 
		"STRING_INTERPOLATION_END", "TEMPLATE", "ESCAPE_CHARACTER", "TEXT_CONTENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'+'", "'-'", "'!'", "'^'", 
		"'*'", "'/'", "'%'", "'='", "'=='", undefined, "'&'", "'&&'", "'||'", 
		"'<'", "'>'", "'<='", "'>='", "'('", "')'", "'.'", "'['", "']'", "'{'", 
		"'}'", "','", "':'", "';'", "'=>'", "'??'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "BlockComment", "LineComment", "STRING_INTERPOLATION_START", 
		"PLUS", "SUBSTRACT", "NON", "XOR", "ASTERISK", "SLASH", "PERCENT", "EQUAL", 
		"DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND", "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", 
		"LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl", "MORE_OR_EQUAL", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
		"OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", "COLON", "SEMICOLON", 
		"ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", "WHITESPACE", "IDENTIFIER", 
		"NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "TEMPLATE", "ESCAPE_CHARACTER", 
		"TEXT_CONTENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionAntlrLexer._LITERAL_NAMES, ExpressionAntlrLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionAntlrLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;      // usually we ignore whitespace, but inside stringInterpolation, whitespace is significant


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionAntlrLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ExpressionAntlrLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionAntlrLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionAntlrLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ExpressionAntlrLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ExpressionAntlrLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 5:
			this.STRING_INTERPOLATION_START_action(_localctx, actionIndex);
			break;

		case 42:
			this.STRING_INTERPOLATION_END_action(_localctx, actionIndex);
			break;
		}
	}
	private STRING_INTERPOLATION_START_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			 this.ignoreWS = false;
			break;
		}
	}
	private STRING_INTERPOLATION_END_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 37:
			return this.WHITESPACE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WHITESPACE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02,\u0134\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
		"\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04" +
		"\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04" +
		"\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04" +
		"\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*" +
		"\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04i\n\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x06\x04o\n\x04\r\x04\x0E\x04p\x07\x04s\n\x04\f\x04\x0E\x04" +
		"v\v\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05~\n\x05" +
		"\f\x05\x0E\x05\x81\v\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x07\x06\x8C\n\x06\f\x06\x0E\x06\x8F\v\x06\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t" +
		"\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x05\x11\xAF\n\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03" +
		"\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03" +
		"\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03" +
		" \x03!\x03!\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03&\x06" +
		"&\xE0\n&\r&\x0E&\xE1\x03&\x03&\x06&\xE6\n&\r&\x0E&\xE7\x05&\xEA\n&\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x05(\xF6\n(\x03(\x03" +
		"(\x03(\x07(\xFB\n(\f(\x0E(\xFE\v(\x03)\x05)\u0101\n)\x03)\x03)\x03)\x03" +
		")\x03*\x03*\x03*\x03*\x07*\u010B\n*\f*\x0E*\u010E\v*\x03*\x03*\x03*\x03" +
		"*\x03*\x07*\u0115\n*\f*\x0E*\u0118\v*\x03*\x05*\u011B\n*\x03+\x03+\x03" +
		",\x03,\x03,\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x06-\u012A\n-\r-\x0E" +
		"-\u012B\x03-\x03-\x03.\x03.\x03.\x03/\x03/\x05\x7F\u010C\u0116\x02\x02" +
		"0\x04\x02\x02\x06\x02\x02\b\x02\x02\n\x02\x03\f\x02\x04\x0E\x02\x05\x10" +
		"\x02\x06\x12\x02\x07\x14\x02\b\x16\x02\t\x18\x02\n\x1A\x02\v\x1C\x02\f" +
		"\x1E\x02\r \x02\x0E\"\x02\x0F$\x02\x10&\x02\x11(\x02\x12*\x02\x13,\x02" +
		"\x14.\x02\x150\x02\x162\x02\x174\x02\x186\x02\x198\x02\x1A:\x02\x1B<\x02" +
		"\x1C>\x02\x1D@\x02\x1EB\x02\x1FD\x02 F\x02!H\x02\"J\x02#L\x02$N\x02%P" +
		"\x02&R\x02\'T\x02(V\x02)X\x02\x02Z\x02*\\\x02+^\x02,\x04\x02\x03\r\x04" +
		"\x02C\\c|\x03\x022;\t\x02\f\f\x0F\x0F$$))bb}}\x7F\x7F\x04\x02\f\f\x0F" +
		"\x0F\x06\x02\v\v\"\"\xA2\xA2\uFF01\uFF01\x05\x02%%BBaa\x04\x02))^^\x03" +
		"\x02))\x04\x02$$^^\x03\x02$$\x04\x02&&bb\x02\u014A\x02\n\x03\x02\x02\x02" +
		"\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02" +
		"\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02" +
		"\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02\x02\x02\x02\x1C\x03\x02\x02\x02" +
		"\x02\x1E\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02\"\x03\x02\x02\x02\x02" +
		"$\x03\x02\x02\x02\x02&\x03\x02\x02\x02\x02(\x03\x02\x02\x02\x02*\x03\x02" +
		"\x02\x02\x02,\x03\x02\x02\x02\x02.\x03\x02\x02\x02\x020\x03\x02\x02\x02" +
		"\x022\x03\x02\x02\x02\x024\x03\x02\x02\x02\x026\x03\x02\x02\x02\x028\x03" +
		"\x02\x02\x02\x02:\x03\x02\x02\x02\x02<\x03\x02\x02\x02\x02>\x03\x02\x02" +
		"\x02\x02@\x03\x02\x02\x02\x02B\x03\x02\x02\x02\x02D\x03\x02\x02\x02\x02" +
		"F\x03\x02\x02\x02\x02H\x03\x02\x02\x02\x02J\x03\x02\x02\x02\x02L\x03\x02" +
		"\x02\x02\x02N\x03\x02\x02\x02\x02P\x03\x02\x02\x02\x02R\x03\x02\x02\x02" +
		"\x02T\x03\x02\x02\x02\x02V\x03\x02\x02\x02\x03X\x03\x02\x02\x02\x03Z\x03" +
		"\x02\x02\x02\x03\\\x03\x02\x02\x02\x03^\x03\x02\x02\x02\x04`\x03\x02\x02" +
		"\x02\x06b\x03\x02\x02\x02\bd\x03\x02\x02\x02\ny\x03\x02\x02\x02\f\x87" +
		"\x03\x02\x02\x02\x0E\x92\x03\x02\x02\x02\x10\x97\x03\x02\x02\x02\x12\x99" +
		"\x03\x02\x02\x02\x14\x9B\x03\x02\x02\x02\x16\x9D\x03\x02\x02\x02\x18\x9F" +
		"\x03\x02\x02\x02\x1A\xA1\x03\x02\x02\x02\x1C\xA3\x03\x02\x02\x02\x1E\xA5" +
		"\x03\x02\x02\x02 \xA7\x03\x02\x02\x02\"\xAE\x03\x02\x02\x02$\xB0\x03\x02" +
		"\x02\x02&\xB2\x03\x02\x02\x02(\xB5\x03\x02\x02\x02*\xB8\x03\x02\x02\x02" +
		",\xBA\x03\x02\x02\x02.\xBC\x03\x02\x02\x020\xBF\x03\x02\x02\x022\xC2\x03" +
		"\x02\x02\x024\xC4\x03\x02\x02\x026\xC6\x03\x02\x02\x028\xC8\x03\x02\x02" +
		"\x02:\xCA\x03\x02\x02\x02<\xCC\x03\x02\x02\x02>\xCE\x03\x02\x02\x02@\xD0" +
		"\x03\x02\x02\x02B\xD2\x03\x02\x02\x02D\xD4\x03\x02\x02\x02F\xD6\x03\x02" +
		"\x02\x02H\xD9\x03\x02\x02\x02J\xDC\x03\x02\x02\x02L\xDF\x03\x02\x02\x02" +
		"N\xEB\x03\x02\x02\x02P\xF5\x03\x02\x02\x02R\u0100\x03\x02\x02\x02T\u011A" +
		"\x03\x02\x02\x02V\u011C\x03\x02\x02\x02X\u011E\x03\x02\x02\x02Z\u0124" +
		"\x03\x02\x02\x02\\\u012F\x03\x02\x02\x02^\u0132\x03\x02\x02\x02`a\t\x02" +
		"\x02\x02a\x05\x03\x02\x02\x02bc\t\x03\x02\x02c\x07\x03\x02\x02\x02dt\x07" +
		"}\x02\x02es\x05N\'\x02fi\x05P(\x02gi\x05T*\x02hf\x03\x02\x02\x02hg\x03" +
		"\x02\x02\x02ij\x03\x02\x02\x02jn\x07<\x02\x02ko\x05T*\x02lo\n\x04\x02" +
		"\x02mo\x05\b\x04\x02nk\x03\x02\x02\x02nl\x03\x02\x02\x02nm\x03\x02\x02" +
		"\x02op\x03\x02\x02\x02pn\x03\x02\x02\x02pq\x03\x02\x02\x02qs\x03\x02\x02" +
		"\x02re\x03\x02\x02\x02rh\x03\x02\x02\x02sv\x03\x02\x02\x02tr\x03\x02\x02" +
		"\x02tu\x03\x02\x02\x02uw\x03\x02\x02\x02vt\x03\x02\x02\x02wx\x07\x7F\x02" +
		"\x02x\t\x03\x02\x02\x02yz\x071\x02\x02z{\x07,\x02\x02{\x7F\x03\x02\x02" +
		"\x02|~\v\x02\x02\x02}|\x03\x02\x02\x02~\x81\x03\x02\x02\x02\x7F\x80\x03" +
		"\x02\x02\x02\x7F}\x03\x02\x02\x02\x80\x82\x03\x02\x02\x02\x81\x7F\x03" +
		"\x02\x02\x02\x82\x83\x07,\x02\x02\x83\x84\x071\x02\x02\x84\x85\x03\x02" +
		"\x02\x02\x85\x86\b\x05\x02\x02\x86\v\x03\x02\x02\x02\x87\x88\x071\x02" +
		"\x02\x88\x89\x071\x02\x02\x89\x8D\x03\x02\x02\x02\x8A\x8C\n\x05\x02\x02" +
		"\x8B\x8A\x03\x02\x02\x02\x8C\x8F\x03\x02\x02\x02\x8D\x8B\x03\x02\x02\x02" +
		"\x8D\x8E\x03\x02\x02\x02\x8E\x90\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02" +
		"\x90\x91\b\x06\x02\x02\x91\r\x03\x02\x02\x02\x92\x93\x07b\x02\x02\x93" +
		"\x94\b\x07\x03\x02\x94\x95\x03\x02\x02\x02\x95\x96\b\x07\x04\x02\x96\x0F" +
		"\x03\x02\x02\x02\x97\x98\x07-\x02\x02\x98\x11\x03\x02\x02\x02\x99\x9A" +
		"\x07/\x02\x02\x9A\x13\x03\x02\x02\x02\x9B\x9C\x07#\x02\x02\x9C\x15\x03" +
		"\x02\x02\x02\x9D\x9E\x07`\x02\x02\x9E\x17\x03\x02\x02\x02\x9F\xA0\x07" +
		",\x02\x02\xA0\x19\x03\x02\x02\x02\xA1\xA2\x071\x02\x02\xA2\x1B\x03\x02" +
		"\x02\x02\xA3\xA4\x07\'\x02\x02\xA4\x1D\x03\x02\x02\x02\xA5\xA6\x07?\x02" +
		"\x02\xA6\x1F\x03\x02\x02\x02\xA7\xA8\x07?\x02\x02\xA8\xA9\x07?\x02\x02" +
		"\xA9!\x03\x02\x02\x02\xAA\xAB\x07#\x02\x02\xAB\xAF\x07?\x02\x02\xAC\xAD" +
		"\x07>\x02\x02\xAD\xAF\x07@\x02\x02\xAE\xAA\x03\x02\x02\x02\xAE\xAC\x03" +
		"\x02\x02\x02\xAF#\x03\x02\x02\x02\xB0\xB1\x07(\x02\x02\xB1%\x03\x02\x02" +
		"\x02\xB2\xB3\x07(\x02\x02\xB3\xB4\x07(\x02\x02\xB4\'\x03\x02\x02\x02\xB5" +
		"\xB6\x07~\x02\x02\xB6\xB7\x07~\x02\x02\xB7)\x03\x02\x02\x02\xB8\xB9\x07" +
		">\x02\x02\xB9+\x03\x02\x02\x02\xBA\xBB\x07@\x02\x02\xBB-\x03\x02\x02\x02" +
		"\xBC\xBD\x07>\x02\x02\xBD\xBE\x07?\x02\x02\xBE/\x03\x02\x02\x02\xBF\xC0" +
		"\x07@\x02\x02\xC0\xC1\x07?\x02\x02\xC11\x03\x02\x02\x02\xC2\xC3\x07*\x02" +
		"\x02\xC33\x03\x02\x02\x02\xC4\xC5\x07+\x02\x02\xC55\x03\x02\x02\x02\xC6" +
		"\xC7\x070\x02\x02\xC77\x03\x02\x02\x02\xC8\xC9\x07]\x02\x02\xC99\x03\x02" +
		"\x02\x02\xCA\xCB\x07_\x02\x02\xCB;\x03\x02\x02\x02\xCC\xCD\x07}\x02\x02" +
		"\xCD=\x03\x02\x02\x02\xCE\xCF\x07\x7F\x02\x02\xCF?\x03\x02\x02\x02\xD0" +
		"\xD1\x07.\x02\x02\xD1A\x03\x02\x02\x02\xD2\xD3\x07<\x02\x02\xD3C\x03\x02" +
		"\x02\x02\xD4\xD5\x07=\x02\x02\xD5E\x03\x02\x02\x02\xD6\xD7\x07?\x02\x02" +
		"\xD7\xD8\x07@\x02\x02\xD8G\x03\x02\x02\x02\xD9\xDA\x07A\x02\x02\xDA\xDB" +
		"\x07A\x02\x02\xDBI\x03\x02\x02\x02\xDC\xDD\x07A\x02\x02\xDDK\x03\x02\x02" +
		"\x02\xDE\xE0\x05\x06\x03\x02\xDF\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02" +
		"\x02\xE1\xDF\x03\x02\x02\x02\xE1\xE2\x03\x02\x02\x02\xE2\xE9\x03\x02\x02" +
		"\x02\xE3\xE5\x070\x02\x02\xE4\xE6\x05\x06\x03\x02\xE5\xE4\x03\x02\x02" +
		"\x02\xE6\xE7\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE7\xE8\x03\x02\x02" +
		"\x02\xE8\xEA\x03\x02\x02\x02\xE9\xE3\x03\x02\x02\x02\xE9\xEA\x03\x02\x02" +
		"\x02\xEAM\x03\x02\x02\x02\xEB\xEC\t\x06\x02\x02\xEC\xED\x06\'\x02\x02" +
		"\xED\xEE\x03\x02\x02\x02\xEE\xEF\b\'\x02\x02\xEFO\x03\x02\x02\x02\xF0" +
		"\xF6\x05\x04\x02\x02\xF1\xF6\t\x07\x02\x02\xF2\xF3\x07B\x02\x02\xF3\xF6" +
		"\x07B\x02\x02\xF4\xF6\x04&\'\x02\xF5\xF0\x03\x02\x02\x02\xF5\xF1\x03\x02" +
		"\x02\x02\xF5\xF2\x03\x02\x02\x02\xF5\xF4\x03\x02\x02\x02\xF6\xFC\x03\x02" +
		"\x02\x02\xF7\xFB\x05\x04\x02\x02\xF8\xFB\x05\x06\x03\x02\xF9\xFB\x07a" +
		"\x02\x02\xFA\xF7\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02\xFA\xF9\x03\x02" +
		"\x02\x02\xFB\xFE\x03\x02\x02\x02\xFC\xFA\x03\x02\x02\x02\xFC\xFD\x03\x02" +
		"\x02\x02\xFDQ\x03\x02\x02\x02\xFE\xFC\x03\x02\x02\x02\xFF\u0101\x07\x0F" +
		"\x02\x02\u0100\xFF\x03\x02\x02\x02\u0100\u0101\x03\x02\x02\x02\u0101\u0102" +
		"\x03\x02\x02\x02\u0102\u0103\x07\f\x02\x02\u0103\u0104\x03\x02\x02\x02" +
		"\u0104\u0105\b)\x02\x02\u0105S\x03\x02\x02\x02\u0106\u010C\x07)\x02\x02" +
		"\u0107\u0108\x07^\x02\x02\u0108\u010B\t\b\x02\x02\u0109\u010B\n\t\x02" +
		"\x02\u010A\u0107\x03\x02\x02\x02\u010A\u0109\x03\x02\x02\x02\u010B\u010E" +
		"\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010C\u010A\x03\x02\x02\x02" +
		"\u010D\u010F\x03\x02\x02\x02\u010E\u010C\x03\x02\x02\x02\u010F\u011B\x07" +
		")\x02\x02\u0110\u0116\x07$\x02\x02\u0111\u0112\x07^\x02\x02\u0112\u0115" +
		"\t\n\x02\x02\u0113\u0115\n\v\x02\x02\u0114\u0111\x03\x02\x02\x02\u0114" +
		"\u0113\x03\x02\x02\x02\u0115\u0118\x03\x02\x02\x02\u0116\u0117\x03\x02" +
		"\x02\x02\u0116\u0114\x03\x02\x02\x02\u0117\u0119\x03\x02\x02\x02\u0118" +
		"\u0116\x03\x02\x02\x02\u0119\u011B\x07$\x02\x02\u011A\u0106\x03\x02\x02" +
		"\x02\u011A\u0110\x03\x02\x02\x02\u011BU\x03\x02\x02\x02\u011C\u011D\v" +
		"\x02\x02\x02\u011DW\x03\x02\x02\x02\u011E\u011F\x07b\x02\x02\u011F\u0120" +
		"\b,\x05\x02\u0120\u0121\x03\x02\x02\x02\u0121\u0122\b,\x06\x02\u0122\u0123" +
		"\b,\x07\x02\u0123Y\x03\x02\x02\x02\u0124\u0125\x07&\x02\x02\u0125\u0129" +
		"\x07}\x02\x02\u0126\u012A\x05T*\x02\u0127\u012A\x05\b\x04\x02\u0128\u012A" +
		"\n\x04\x02\x02\u0129\u0126\x03\x02\x02\x02\u0129\u0127\x03\x02\x02\x02" +
		"\u0129\u0128\x03\x02\x02\x02\u012A\u012B\x03\x02\x02\x02\u012B\u0129\x03" +
		"\x02\x02\x02\u012B\u012C\x03\x02\x02\x02\u012C\u012D\x03\x02\x02\x02\u012D" +
		"\u012E\x07\x7F\x02\x02\u012E[\x03\x02\x02\x02\u012F\u0130\x07^\x02\x02" +
		"\u0130\u0131\t\f\x02\x02\u0131]\x03\x02\x02\x02\u0132\u0133\v\x02\x02" +
		"\x02\u0133_\x03\x02\x02\x02\x1A\x02\x03hnprt\x7F\x8D\xAE\xE1\xE7\xE9\xF5" +
		"\xFA\xFC\u0100\u010A\u010C\u0114\u0116\u011A\u0129\u012B\b\b\x02\x02\x03" +
		"\x07\x02\x07\x03\x02\x03,\x03\t\x05\x02\x06\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionAntlrLexer.__ATN) {
			ExpressionAntlrLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionAntlrLexer._serializedATN));
		}

		return ExpressionAntlrLexer.__ATN;
	}

}

