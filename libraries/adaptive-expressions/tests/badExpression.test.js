const { ExpressionParser } = require('../lib');
const assert = require('assert');

const parser = new ExpressionParser();

const scope = {
    one: 1.0,
    two: 2.0,
    hello: 'hello',
    world: 'world',
    istrue: true,
    nullObj: undefined,
    bag: {
        three: 3.0,
        set: {
            four: 4.0,
        },
        list: ['red', 'blue'],
        index: 3,
        name: 'mybag',
    },
    items: ['zero', 'one', 'two'],
    nestedItems: [{ x: 1 }, { x: 2 }, { x: 3 }],
    timestamp: '2018-03-15T13:00:00.111Z',
    noISOTimestamp: '2018-03-15T13:00:00Z',
    notValidTimestamp: 'timestmap',
    notValidTimestamp2: '1521118800',
    notValidTimestamp3: '20181115',
    relativeUri: '../catalog/shownew.htm?date=today',
    json2: {
        Enabled: true,
        Roles: ['User', 'Admin'],
    },
    jarray1: ['a', 'b'],
    turn: {
        recognized: {
            entities: {
                city: 'Seattle',
            },
            intents: {
                BookFlight: 'BookFlight',
            },
        },
    },
    dialog: {
        result: {
            title: 'Dialog Title',
            subTitle: 'Dialog Sub Title',
        },
    },
    invalidXml:
        "<?xml version='1.0'?> <produce> <item> <name>Gala</name> <type>apple</type> <count>20</count> </item> <item> <name>Honeycrisp</name> <type>apple</type> <count>10</count>",
};

const invalidExpressions = [
    'hello world',
    'a+',
    'a+b*',
    'fun(a, b, c',
    'func(A,b,b,)',
    '"hello\'',
    'user.lists.{dialog.listName}',
    '`hi` world',
];

const badExpressions = [
    {
        label: 'General',
        testCases: [
            ['func()', 'no such func'],
            ['length(func())', 'no such function in children'],
            ['a.func()', 'no such function'],
            ['(1.ForEach)()', 'error func missing'],
            ["('str'.ForEach)()", 'error func missing'],
            ["'hello'.length()", 'not supported currently'],
        ],
    },
    {
        label: 'Operators',
        testCases: [
            ['istrue + 1', 'params should be number or string'],
            [
                'one + two + nullObj',
                "Operator '+' or add cannot be applied to operands of type 'number' and null object",
            ],
            ["'1' * 2", 'params should be number'],
            ["'1' - 2", 'params should be number'],
            ["'1' / 2", 'params should be number'],
            ["'1' % 2", 'params should be number'],
            ["'1' ^ 2", 'params should be number'],
            ['1/0', 'can not divide 0'],
        ],
    },
    {
        label: 'String functions',
        testCases: [
            ['Length(one, 1)', 'length can only have one param'],
            ['Length(Replace(hello))', 'children func error'],
            ['Replace(hello)', 'replace need three parameters'],
            ["Replace(one, 'l', 'k')", 'replace only accept string parameter'],
            ["Replace('hi', 1, 'k')", 'replace only accept string parameter'],
            ["Replace('hi', 'l', 1)", 'replace only accept string parameter'],
            ["Replace('hi', nullObj, 'k')", 'replace oldValue must string length not Less than 1'],
            ['ReplaceIgnoreCase(hello)', 'ReplaceIgnoreCase need three parameters'],
            ["ReplaceIgnoreCase('HI', nullObj, 'k')", 'ReplaceIgnoreCase oldValue must string length not Less than 1'],
            ["ReplaceIgnoreCase(one, 'l', 'k')", 'ReplaceIgnoreCase only accept string parameter'],
            ["ReplaceIgnoreCase('hi', 1, 'k')", 'ReplaceIgnoreCase only accept string parameter'],
            ["ReplaceIgnoreCase('hi', 'l', 1)", 'ReplaceIgnoreCase only accept string parameter'],
            ["Split(hello, 'l',  'l')", 'split need one or two parameters'],
            ["Split(one, 'l')", 'split only accept string parameter'],
            ['Split(hello, 1)', 'split only accept string parameter'],
            ['Substring(hello, 0.5)', 'the second parameter of substring must be integer'],
            ['Substring(two, 0)', 'the first parameter of substring must be string or null'],
            ['Substring(hello, 10)', 'the Start index is out of the range of the string length'],
            ['Substring(hello, 0, hello)', 'length is not integer'],
            ["Substring(hello, 0, 'hello')", 'length is not integer'],
            ['Substring(hello, 0, 10)', 'the length of substring is out of the range of the original string'],
            ['ToLower(one)', 'the parameter of ToLower must be string'],
            ["ToLower('hi', 1)", 'should have 1 param'],
            ['ToUpper(one)', 'the parameter of ToUpper must be string'],
            ["ToUpper('hi', 1)", 'should have 1 param'],
            ['Trim(one)', 'the parameter of Trim must be string'],
            ["Trim('hi', 1)", 'should have 1 param'],
            ['EndsWith(hello, one)', 'should have string params'],
            ['EndsWith(one, hello)', 'should have string params'],
            ['EndsWith(hello)', 'should have two params'],
            ['StartsWith(hello, one)', 'should have string params'],
            ['StartsWith(one, hello)', 'should have string params'],
            ['StartsWith(hello)', 'should have two params'],
            ['CountWord(hello, 1)', 'should have one param'],
            ['CountWord(one)', 'should have string param'],
            ['AddOrdinal(one + 0.5)', 'should have Integer param'],
            ['AddOrdinal(one, two)', 'should have one param'],
            ['NewGuid(one)', 'should have no parameters'],
            ['EOL(one)', 'should have no parameters'],
            ['IndexOf(hello)', 'should have two parameters'],
            ['IndexOf(hello, world, one)', 'should have two parameters'],
            ['IndexOf(hello, one)', 'second parameter should be string'],
            ['IndexOf(one, hello)', 'first parameter should be list or string'],
            ['LastIndexOf(hello)', 'should have two parameters'],
            ['LastIndexOf(hello, world, one)', 'should have two parameters'],
            ['LastIndexOf(hello, one)', 'second parameter should be string'],
            ['LastIndexOf(one, hello)', 'first parameter should be list or string'],
            ['SentenceCase(hello, hello, hello)', 'should have one or two parameters'],
            ['SentenceCase(one)', 'first parameter should be string'],
            ['TitleCase(hello, hello, hello)', 'should have one or two parameters'],
            ['TitleCase(one)', 'first parameter should be string'],
        ],
    },
    {
        label: 'Logical comparison functions',
        testCases: [
            ['Greater(one, hello)', 'string and integer are not comparable'],
            ['Greater(one)', 'Greater need two parameters'],
            ['GreaterOrEquals(one, hello)', 'string and integer are not comparable'],
            ['GreaterOrEquals(one)', 'function need two parameters'],
            ['Less(false, true)', 'boolean are not comparable'],
            ['Less(1, true)', 'number and boolean are not comparable'],
            ['Less(Json("{}"), [])', 'objects are not comparable'],
            ['Less(one, hello)', 'string and integer are not comparable'],
            ['Less(one)', 'function need two parameters'],
            ['LessOrEquals(one, hello)', 'string and integer are not comparable'],
            ['LessOrEquals(one)', 'function need two parameters'],
            ['Equals(one)', 'Equals must accept two parameters'],
            ['Exists(1, 2)', 'function need one parameter'],
            // ["if(!Exists(one), one, hello)", 'the second and third parameters of if must the same type'],
            ['Not(false, one)', 'function need one parameter'],
        ],
    },
    {
        label: 'Conversion functions',
        testCases: [
            ['Float(hello)', 'param shoud be float format string'],
            ['Float(hello, 1)', 'shold have 1 param'],
            ['Int(hello)', 'param shoud be int format string'],
            ['Int(1, 1)', 'shold have 1 param'],
            ['String(hello, 1)', 'shold have 1 param'],
            ['Bool(false, 1)', 'shold have 1 param'],
            ['Array()', 'should have 1 param'],
            ['Array(hello, world)', 'should have 1 param'],
            ['Array(false)', 'param should be string'],
            ['Binary()', 'should have 1 param'],
            ['Binary(hello, world)', 'should have 1 param'],
            ['Binary(false)', 'param should be string'],
            ['DataUri()', 'should have 1 param'],
            ['DataUri(hello, world)', 'should have 1 param'],
            ['DataUri(false)', 'param should be string'],
            ['DataUriToBinary()', 'should have 1 param'],
            ['DataUriToBinary(hello, world)', 'should have 1 param'],
            ['DataUriToBinary(false)', 'param should be string'],
            ['DataUriToString()', 'should have 1 param'],
            ['DataUriToString(hello, world)', 'should have 1 param'],
            ['DataUriToString(false)', 'param should be string'],
            ['UriComponentToString()', 'should have 1 param'],
            ['UriComponentToString(hello, world)', 'should have 1 param'],
            ['UriComponentToString(false)', 'param should be string'],
            ['Base64()', 'should have 1 param'],
            ['Base64(hello, world)', 'should have 1 param'],
            ['Base64ToBinary()', 'should have 1 param'],
            ['Base64ToBinary(hello, world)', 'should have 1 param'],
            ['Base64ToBinary(false)', 'param should be string'],
            ['Base64ToString()', 'should have 1 param'],
            ['Base64ToString(hello, world)', 'should have 1 param'],
            ['Base64ToString(false)', 'param should be string'],
            ['FormatNumber(1,2,3)', 'invalid locale type'],
            ['FormatNumber(hello,2.0)', 'the first parameter should be a number'],
            ['UriComponent()', 'should have 1 param'],
            ['UriComponent(hello, world)', 'should have 1 param'],
            ['UriComponent(false)', 'param should be string'],
            ['JsonStringify(hello, 12)', 'should have 1 param'],
        ],
    },
    {
        label: 'Math functions',
        testCases: [
            ['Max(hello, one)', 'param should be number'],
            ['Max()', 'function need 1 or more than 1 parameters'],
            ['Min(hello, one)', 'param should be number'],
            ['Min()', 'function need 1 or more than 1 parameters'],
            ['Add(istrue, 2)', 'param should be number or string'],
            ['Add()', "arg Count doesn't match"],
            ['Add(one)', 'add function need two or more parameters'],
            ['Sub(hello, 2)', 'param should be number'],
            ['Sub()', "arg Count doesn't match"],
            ['Sub(five, six)', 'no such variables'],
            ['Sub(one)', 'sub function need two or more parameters'],
            ['Mul(hello, one)', 'param should be number'],
            ['Mul(one)', 'mul function need two or more parameters'],
            ['Div(one, 0)', 'one cannot be divided by zero'],
            ['Div(one)', 'div function need two or more parameters'],
            ['Div(hello, one)', 'string hello cannot be divided'],
            ['Exp(2, hello)', 'exp cannot accept parameter of string'],
            ['Mod(1, 0)', 'mod cannot accept zero as the second parameter'],
            ['Mod(5.5, 2)', ' param should be integer'],
            ['Mod(5, 2.1)', ' param should be integer'],
            ['Mod(5, 2.1 ,3)', 'need two params'],
            ['Rand(5, 6.1)', ' param should be integer'],
            ['Rand(5)', 'need two params'],
            ['Rand(7, 6)', ' minvalue cannot be Greater than maxValue'],
            ['Sum(items)', 'should have number parameters'],
            ['Range(one)', 'should have two params'],
            ['Range(one, two, three)', 'should have two params'],
            ['Range(one, hello)', 'params should be integer'],
            ['Range(hello, one)', 'params should be integer'],
            ['Range(one, 0)', 'second param should be more than 0'],
            ['Floor(hello)', 'should have a numeric parameter'],
            ['Floor(1.2, 2)', 'should have only 1 numeric parameter'],
            ['Ceiling(hello)', 'should have a numeric parameter'],
            ['Ceiling(1.2, 2)', 'should have only 1 numeric parameter'],
            ['Round(hello)', 'should have numeric parameters'],
            ['Round(1.333, hello)', 'should have numeric parameters'],
            ['Ceiling(1.2, 2.1)', 'the second parameter should be integer'],
            ['Ceiling(1.2, -2)', 'the second parameter should be integer not Less than 0'],
            ['Ceiling(1.2, 16)', 'the second parameter should be integer not Greater than 15'],
            ['Ceiling(1.2, 12, 7)', 'should have one or two numeric parameters'],
            ['Abs()', 'should have one parameter'],
            ['Abs(hello)', 'should have one number parameter'],
            ['Sqrt()', 'should have one parameter'],
            ['Sqrt(hello)', 'should have one number parameter'],
            ['Sqrt(-1)', 'should have one non-nagitive number parameter'],
        ],
    },
    {
        label: 'Date and Time functions',
        testCases: [
            ['IsDefinite(12345)', 'should hava a string or a TimexProperty parameter'],
            ["IsDefinite('world', 123445)", 'should have only one parameter'],
            ['IsTime(123445)', 'should hava a string or a TimexProperty parameter'],
            ["IsTime('world', 123445)", 'should have only one parameter'],
            ['IsDuration(123445)', 'should hava a string or a TimexProperty parameter'],
            ["IsDuration('world', 123445)", 'should have only one parameter'],
            ['IsDate(123445)', 'should hava a string or a TimexProperty parameter'],
            ["IsDate('world', 123445)", 'should have only one parameter'],
            ['IsTimeRange(123445)', 'should hava a string or a TimexProperty parameter'],
            ["IsTimeRange('world', 123445)", 'should have only one parameter'],
            ['IsDateRange(123445)', 'should hava a string or a TimexProperty parameter'],
            ["IsDateRange('world', 123445)", 'should have only one parameter'],
            ['IsPresent(123445)', 'should hava a string or a TimexProperty parameter'],
            ["IsPresent('world', 123445)", 'should have only one parameter'],
            ["AddDays('errortime', 1)", 'error Datetime format'],
            ["AddDays(timestamp, 'hi')", 'second param should be integer'],
            ['AddDays(timestamp)', 'should have 2 or 3 or 4 params'],
            ["AddDays(timestamp, 1,'yyyy', 'en-US', 2)", 'should have 2 or 3 or 4 params'],
            ['AddDays(notISOTimestamp, 1)', 'not ISO Datetime format'],
            ["AddHours('errortime', 1)", 'error Datetime format'],
            ["AddHours(timestamp, 'hi')", 'second param should be integer'],
            ['AddHours(timestamp)', 'should have 2 or 3 params'],
            ["AddHours(timestamp, 1,'yyyy', 'en-US', 2)", 'should have 2 or 3 or 4 params'],
            ['AddHours(notISOTimestamp, 1)', 'not ISO Datetime format'],
            ["AddMinutes('errortime', 1)", 'error Datetime format'],
            ["AddMinutes(timestamp, 'hi')", 'second param should be integer'],
            ['AddMinutes(timestamp)', 'should have 2 or 3 params'],
            ["AddMinutes(timestamp, 1,'yyyy', 'en-US', 2)", 'should have 2 or 3 or 4 params'],
            ['AddMinutes(notISOTimestamp, 1)', 'not ISO Datetime format'],
            ["AddSeconds('errortime', 1)", 'error Datetime format'],
            ["AddSeconds(timestamp, 'hi')", 'second param should be integer'],
            ['AddSeconds(timestamp)', 'should have 2 or 3 params'],
            ["AddSeconds(timestamp, 1,'yyyy', 'en-US', 2)", 'should have 2 or 3 or 4 params'],
            ['AddSeconds(notISOTimestamp, 1)', 'not ISO Datetime format'],
            ["DayOfMonth('errortime')", 'error Datetime format'],
            ['DayOfMonth(timestamp, 1)', 'should have 1 param'],
            ['DayOfMonth(notISOTimestamp)', 'not ISO Datetime format'],
            ["DayOfWeek('errortime')", 'error Datetime format'],
            ['DayOfWeek(timestamp, 1)', 'should have 1 param'],
            ['DayOfWeek(notISOTimestamp)', 'not ISO Datetime format'],
            ["DayOfYear('errortime')", 'error Datetime format'],
            ['DayOfYear(timestamp, 1)', 'should have 1 param'],
            ['DayOfYear(notISOTimestamp)', 'not ISO Datetime format'],
            ["Month('errortime')", 'error Datetime format'],
            ['Month(timestamp, 1)', 'should have 1 param'],
            ['Month(noISOTimestamp)', 'not ISO Datetime format'],
            ["Date('errortime')", 'error Datetime format'],
            ['Date(timestamp, 1)', 'should have 1 param'],
            ['Date(noISOTimestamp)', 'not ISO Datetime format'],
            ["Year('errortime')", 'error Datetime format'],
            ['Year(timestamp, 1)', 'should have 1 param'],
            ['Year(noISOTimestamp)', 'not ISO Datetime format'],
            ["FormatDateTime('errortime')", 'error Datetime format'],
            ["FormatDateTime(timestamp, 'yyyy', 'en-US', 1)", 'should have 1 or 2 or 3 params'],
            ['FormatDateTime(notValidTimestamp)', 'not valid timestamp'],
            ['FormatDateTime(notValidTimestamp2)', 'not valid timestamp'],
            ['FormatDateTime(notValidTimestamp3)', 'not valid timestamp'],
            ['FormatDateTime({})', 'error valid Datetime'],
            ['FormatDateTime(timestamp, 1)', 'invalid format string'],
            ["FormatEpoch('time')", 'error string'],
            ["FormatEpoch(timestamp, 'yyyy', 'en-US', 1)", 'should have 1 or 2 or 3 params'],
            ["FormatTicks('string')", 'String is not valid'],
            ["FormatTicks(12234231423423, 'yyyy', 'en-US', 1)", 'should have 1 or 2 or 3 params'],
            ['FormatTicks({})', 'object is not valid'],
            ["SubtractFromTime('errortime', 1, 'yyyy')", 'error Datetime format'],
            ["SubtractFromTime(timestamp, 1, 'W')", 'error time unit'],
            ["SubtractFromTime(timestamp, timestamp, 'W')", 'error parameters format'],
            ["SubtractFromTime(timestamp, '1', 'yyyy')", 'second param should be integer'],
            ["SubtractFromTime(timestamp, 'yyyy')", 'should have 3 or 4 or 5 params'],
            ["SubtractFromTime(timestamp, 1, 'day', 'yyyy', 'en-US', hello)", 'should have 3 or 4 or 5 params'],
            ["SubtractFromTime(noISOTimestamp, 1, 'Year')", ''],
            ["DateReadBack('errortime', 'errortime')", 'error Datetime format'],
            ['DateReadBack(timestamp)', 'shold have two params'],
            ["DateReadBack(timestamp, 'errortime')", 'second param is invalid timestamp format'],
            ['DateReadBack(notISOTimestamp, AddDays(timestamp, 1))', 'not ISO Datetime format'],
            ["GetTimeOfDay('errortime')", 'error Datetime format'],
            ['GetTimeOfDay(timestamp, timestamp)', 'should have 1 param'],
            ['GetTimeOfDay(notISOTimestamp)', 'not ISO Datetime format'],
            ["GetPastTime(1, 'W')", 'error time unit'],
            ["GetPastTime(timestamp, 'W')", 'error parameters format'],
            ["GetPastTime('yyyy', '1')", 'second param should be integer'],
            ["GetPastTime('yyyy')", 'should have 2 or 3 or 4 params'],
            ["GetPastTime(1, 'year', 'yyyy', 'en-GB', hello)", 'should have 2 or 3 or 4 params'],
            ["GetFutureTime(1, 'W')", 'error time unit'],
            ["GetFutureTime(timestamp, 'W')", 'error parameters format'],
            ["GetFutureTime('yyyy', '1')", 'second param should be integer'],
            ["GetFutureTime('yyyy')", 'should have 2 or 3 or 4 params'],
            ["GetFutureTime(1, 'year', 'yyyy', 'en-GB', hello)", 'should have 2 or 3 or 4 params'],
            ["ConvertFromUTC(notValidTimestamp, 'Pacific Standard Time')", 'invalid timestamp'],
            ["ConvertFromUTC('2018-02-02T02:00:00.000Z', 'Pacific Time')", 'invalid timezone'],
            ["ConvertToUTC(notValidTimestamp, 'Pacific Standard Time')", 'invalid timestamp'],
            ["ConvertToUTC('2018-02-02T02:00:00.000', 'Pacific Time')", 'invalid timezone'],
            ['StartOfDay(notValidTimeStamp)', 'invalid timestamp'],
            ['StartOfHour(notValidTimeStamp)', 'invalid timestamp'],
            ['StartOfMonth(notValidTimeStamp)', 'invalid timestamp'],
            ['Ticks(notValidTimeStamp)', 'not valid timestamp'],
            ['Ticks()', 'should have one parameters'],
            [
                'DateTimeDiff(notValidTimeStamp,"2018-01-01T08:00:00.000Z")',
                'the first parameter is not a valid timestamp',
            ],
            [
                'DateTimeDiff("2017-01-01T08:00:00.000Z",notValidTimeStamp)',
                'the second parameter is not a valid timestamp',
            ],
            [
                'DateTimeDiff("2017-01-01T08:00:00.000Z","2018-01-01T08:00:00.000Z", "years")',
                'should only have 2 parameters',
            ],
            ['TicksToDays(12.12)', 'should have an integer parameter'],
            ['TicksToHours(12.12)', 'should have an integer parameter'],
            ['TicksToMinutes(12.12)', 'should have an integer parameter'],
            ['GetNextViableDate(hello)', 'should have a "XXXX-MM-DD" format string'],
            ['GetNextViableDate(one)', 'should have a string parameter'],
            ["GetNextViableDate('XXXX-10-10', 20)", 'should only have 1 parameter'],
            ['GetPreviousViableDate(hello)', 'should have a "XXXX-MM-DD" format string'],
            ['GetPreviousViableDate(one)', 'should have a string parameter'],
            ["GetPreviousViableDate('XXXX-10-10', 20)", 'should only have 1 parameter'],
            ['GetNextViableTime(hello)', 'should have a "XX:mm:ss" format string'],
            ['GetNextViableTime(one)', 'should have a string parameter'],
            ["GetNextViableTime('XX:12:12', 20)", 'should only have 1 parameter'],
            ['GetPreviousViableTime(hello)', 'should have a "XX:mm:ss" format string'],
            ['GetPreviousViableTime(one)', 'should have a string parameter'],
            ["GetPreviousViableTime('XX:12:12', 20)", 'should only have 1 parameter'],
            ['Resolve(one)', 'should have string or TimexProperty arguments'],
            ['Resolve("T14", "Asia/Tokyo")', 'should only have one parameter'],
            ['Resolve("12-20")', 'should have a valid TimexPropterty after parsing'],
            ['Resolve("XXXX-WXX-6")', 'not a valid argument'],
        ],
    },
    {
        label: 'Collection functions',
        testCases: [
            ["Sum(items, 'hello')", 'should have 1 parameter'],
            ["Sum('hello')", 'first param should be list'],
            ["Average(items, 'hello')", 'should have 1 parameter'],
            ["Average('hello')", 'first param should be list'],
            ['Average(hello)', 'first param should be list'],
            ["Contains('hello world', 'hello', 'new')", 'should have 2 parameter'],
            ['Count(items, 1)', 'should have 1 parameter'],
            ['Count(1)', 'first param should be string, array or map'],
            ['Reverse(items, 1)', 'should have 1 parameter'],
            ['Reverse(1)', 'first param should be string or array'],
            ['Empty(1,2)', 'should have two params'],
            ['First(items,2)', 'should have 1 param'],
            ['Last(items,2)', 'should have 1 param'],
            ["Join(items, 'p1', 'p2','p3')", 'builtin function should have 2-3 params, '],
            ["Join(hello, 'hi')", 'first param must list'],
            ['Join(items, 1)', 'second param must string '],
            ["Join(items, '1', 2)", 'second param must string '],
            ['ForEach(hello, item, item)', 'first arg is not list or struture'],
            ['ForEach(items, item)', 'should have three parameters'],
            ['ForEach(items, item, item2, item3)', 'should have three parameters'],
            ['ForEach(items, Add(1), item)', 'Second paramter of ForEach is not an identifier'],
            ['ForEach(items, 1, item)', 'Second paramter error'],
            ['ForEach(items, x, Sum(x))', 'third paramter error'],
            ['Select(hello, item, item)', 'first arg is not list'],
            ['Select(items, item)', 'should have three parameters'],
            ['Select(items, item, item2, item3)', 'should have three parameters'],
            ['Select(items, Add(1), item)', 'second paramter of ForEach is not an identifier'],
            ['Select(items, 1, item)', 'second paramter error'],
            ['Select(items, x, Sum(x))', 'third paramter error'],
            ['Where(hello, item, item)', 'first arg is not list or structure'],
            ['Where(items, item)', 'should have three parameters'],
            ['Where(items, item, item2, item3)', 'should have three parameters'],
            ['Where(items, Add(1), item)', 'Second paramter of Where is not an identifier'],
            ['Where(items, 1, item)', 'Second paramter error'],
            ['IndicesAndValues(items, 1)', 'should only have one parameter'],
            ['IndicesAndValues(1)', 'shoud have array param'],
            ['Union(one, two)', 'should have collection param'],
            ['Intersection(one, two)', 'should have collection param'],
            ['Skip(hello)', 'should have two parameters'],
            ['Skip(hello, world, one)', 'should have two parameters'],
            ['Skip(hello, one)', 'first param should be array'],
            ['Skip(items, hello)', 'second param should be integer'],
            ['Skip(items, one + 0.5)', 'second param should be integer'],
            ['Take(hello)', 'should have two parameters'],
            ['Take(hello, world, one)', 'should have two parameters'],
            ['Take(one, two)', 'first param should be array or string'],
            ['Take(items, hello)', 'second param should be integer'],
            ['Take(hello, one + 0.5)', 'second param should be integer'],
            ['SubArray(hello)', 'should have 2 or 3 params'],
            ['SubArray(one, two, hello, world)', 'should have 2 or 3 params'],
            ['SubArray(hello, two)', 'first param should be array'],
            ['SubArray(items, hello)', 'second param should be integer'],
            ['SubArray(items, one, hello)', 'third param should be integer'],
            ["SortBy(hello, 'x')", 'first param should be list'],
            ["SortBy(CreateArray('H','e','l','l','o'), 1)", 'second param should be string'],
            ["SortBy(CreateArray('H','e','l','l','o'), 'x', hi)", 'second param should be string'],
        ],
    },
    {
        label: 'URI parsing',
        testCases: [
            ['UriHost(relativeUri)', ''],
            ['UriPath(relativeUri)', ''],
            ['UriPathAndQuery(relatibeUri)', 'fails for undefined input'],
            ['UriPort(relatibeUri)', 'fails for undefined input'],
            ['UriQuery(relatibeUri)', 'fails for undefined input'],
            ['UriScheme(relatibeUri)', 'fails for undefined input'],
        ],
    },
    {
        label: 'Object manipulation and construction functions',
        testCases: [
            ['Json(1,2)', 'should have 1 parameter'],
            ['Json(1)', 'should be string parameter'],
            ['Json(\'{"key1":value1"}\')', 'invalid Json format string'],
            ["AddProperty(Json('{\"key1\":\"value1\"}'), 'key2','value2','key3')", 'should have 3 parameter'],
            ['AddProperty(Json(\'{"key1":"value1"}\'), 1,\'value2\')', 'second param should be string'],
            ["SetProperty(Json('{\"key1\":\"value1\"}'), 'key2','value2','key3')", 'should have 3 parameter'],
            ['SetProperty(Json(\'{"key1":"value1"}\'), 1,\'value2\')', 'second param should be string'],
            ['RemoveProperty(Json(\'{"key1":"value1","key2":"value2"}\'), 1))', 'second param should be string'],
            ['RemoveProperty(Json(\'{"key1":"value1","key2":"value2"}\'), \'1\', \'2\'))', 'should have 2 parameter'],
            ['Coalesce()', 'should have at least 1 parameter'],
            ['JPath(hello)', 'should have two params'],
            ["JPath(hello, '.key')", 'bad Json'],
            ['JPath(Json(\'{"key1":"value1","key2":"value2"}\'), \'GetTotal\')', 'bad path'],
            ['Merge(1, jarray1)', 'should only have JSON object or array arguments'],
            ['Merge([jarray1])', 'not support nested array'],
            ['Xml("invalid Json string")'],
            //['XPath(invalidXml, "Sum(/produce/item/Count)")'], currently, this test did not throw error correctly
            ['XPath(invalidXml)'],
            ['XPath(xmlStr, "GetTotal")'],
        ],
    },
    {
        label: 'Memory access',
        testCases: [
            ['GetProperty(bag, 1)', 'second param should be string'],
            ['GetProperty(1)', 'if GetProperty Contains only one parameter, the parameter should be string'],
            ['Accessor(1)', 'first param should be string'],
            ['Accessor(bag, 1)', 'second should be object'],
            ['one[0]', 'one is not list'],
            ['items[3]', 'index out of range'],
            ['items[one+0.5]', 'index is not integer'],
        ],
    },
    {
        label: 'Regex',
        testCases: [
            ["IsMatch('^[a-z]+$')", 'should have 2 parameter'],
            ["IsMatch('abC', one)", 'second param should be string'],
            ["IsMatch(1, '^[a-z]+$')", 'first param should be string'],
            ["IsMatch('abC', '^[a-z+$')", ' bad regular expression'],
        ],
    },
    {
        label: 'SetPathToValue',
        testCases: [
            ['SetPathToValue(2+3, 4)', 'Not a real path'],
            ['SetPathToValue(a)', 'Missing value'],
        ],
    },
    {
        label: 'Type checking',
        testCases: [
            ['IsString(hello, hello)', 'should have one parameter'],
            ['IsInteger(one, hello)', 'should have one parameter'],
            ['IsFloat(1.324, hello)', 'should have one parameter'],
            ['IsArray(CreateArray(1,2,3), hello)', 'should have one parameter'],
            ['IsBoolean(true, false)', 'should have one parameter'],
            ['IsDateTime("2018-03-15T13:00:00.111Z", hello)', 'should have one parameter'],
            ['IsObject({}, false)', 'should have one parameter'],
        ],
    },
    {
        label: 'StringOrValue',
        testCases: [
            ['StringOrValue()', 'should have one parameter'],
            ['StringOrValue(1)', 'should have string parameter'],
            ['StringOrValue("${1/0} item")', 'throw error in evaluation stage'],
        ],
    },
];

describe('expression functional test', function () {
    describe('invalidExpressions', function () {
        invalidExpressions.forEach((invalidExpression) => {
            it(`${invalidExpression} throws an exception`, function () {
                assert.throws(
                    () => parser.parse(invalidExpression),
                    /syntax error at line [0-9]+:[0-9]+ Invalid expression format./,
                    'Error message not match.'
                );
            });
        });
    });

    describe('badExpressions', function () {
        badExpressions.forEach(({ label, testCases }) => {
            describe(label, function () {
                testCases.forEach(([expression, description]) => {
                    it(`${expression} ${description}`, async function () {
                        let errorResult;

                        try {
                            const { error } = await parser.parse(expression).tryEvaluate(scope);
                            errorResult = error;
                        } catch (err) {
                            errorResult = err;
                        }

                        assert(errorResult != null);
                    });
                });
            });
        });
    });
});
